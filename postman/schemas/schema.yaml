openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Emu Accom"
  description: "API Documentation for the EMU Accom"
  license:
    name: MIT
externalDocs:
  description: Source Code
  url: https://github.com/ickynavigator/EmuAccom-BE
servers:
  - url: "localhost:3333/v1/api"
tags:
  - name: Dorm
    description: Dormitory related uris
  - name: User
    description: User related uris
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: pageSize
          description: "Pagination: Page size of dorms sent back in the payload. Defaults to 10"
          schema:
            type: integer
        - in: query
          name: pageNumber
          description: "Pagination: Current Page number. Defaults to 1"
          schema:
            type: integer
        - in: query
          name: noPaginate
          description: "Pagination: Deactivate pagination. Defaults to false"
          schema:
            type: boolean
        - in: query
          name: param
          description: "Search: Parameter you want to search in. E.g. Title, Description"
          schema:
            type: string
            default: ""
        - in: query
          name: keyword
          description: "Search: Keyword you want to search in"
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  page:
                    type: integer
                  pages:
                    type: integer
        "401":
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "User: Sign up a user"
      operationId: registerUser
      tags:
        - User
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - type
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                type:
                  type: string
                  enum:
                    - student
                    - staff
                    - admin
      responses:
        "201":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/login:
    post:
      summary: "User: Login a user"
      operationId: loginUser
      tags:
        - User
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dorm:
    get:
      summary: "Dormitory: Fetches all the dorm data"
      operationId: listDorms
      tags:
        - Dorm
      parameters:
        - in: query
          name: pageSize
          description: "Pagination: Page size of dorms sent back in the payload. Defaults to 10"
          schema:
            type: integer
        - in: query
          name: pageNumber
          description: "Pagination: Current Page number. Defaults to 1"
          schema:
            type: integer
        - in: query
          name: noPaginate
          description: "Pagination: Deactivate pagination. Defaults to false"
          schema:
            type: boolean
        - in: query
          name: param
          description: "Search: Parameter you want to search in. E.g. Title, Description"
          schema:
            type: string
            default: ""
        - in: query
          name: keyword
          description: "Search: Keyword you want to search in"
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: "All Dorms or Dorms that match the search params"
          content:
            application/json:
              schema:
                type: object
                properties:
                  dorms:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dorm"
                  page:
                    type: integer
                  pages:
                    type: integer
        "404":
          description: "No dorm available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        type:
          type: string
          enum:
            - student
            - houseOwner
            - dormOwner
        token:
          type: string
        isAdmin:
          type: boolean
    Error:
      type: object
      properties:
        message:
          type: string
    Dorm:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: object
          properties:
            addressLine:
              type: string
            city:
              type: string
            postalCode:
              type: string
            country:
              type: string
        bedroomCount:
          type: integer
          minimum: 1
        bedCount:
          type: integer
          minimum: 1
        bathroomCount:
          type: integer
          minimum: 1
        accomodateCount:
          type: integer
          minimum: 1
        availabilityCount:
          type: integer
          minimum: 1
        pricePerSemester:
          type: integer
          minimum: 1
        pricePerNight:
          type: integer
          minimum: 1
        pictures:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              description:
                type: string
        keywords:
          type: array
          items:
            type: string
        reviews:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              rating:
                type: number
                minimum: 1
              comment:
                type: string
              user:
                type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
