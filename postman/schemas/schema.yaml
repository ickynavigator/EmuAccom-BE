openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Emu Accom"
  description: "API Documentation for the EMU Accom"
  license:
    name: MIT
externalDocs:
  description: Source Code
  url: https://github.com/ickynavigator/EmuAccom-BE
servers:
  - url: "{protocol}://{environment}/v1/api"
    variables:
      protocol:
        default: "https"
        enum:
          - http
          - https
      environment:
        default: "localhost:3333"
tags:
  - name: Dorm
    description: Dormitory related uris
  - name: User
    description: User related uris
  - name: House
    description: House related uris
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/noPaginate"
        - $ref: "#/components/parameters/param"
        - $ref: "#/components/parameters/keyword"
      responses:
        "200":
          $ref: "#/components/responses/ListOfUsersResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: "User: Sign up a user"
      operationId: registerUser
      tags:
        - User
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - type
              properties:
                email:
                  type: string
                  format: email
                  pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
                  maxLength: 256
                password:
                  type: string
                  format: password
                  pattern: ^[A-Za-z0-9!@#$%^&*()_.]{4,64}$
                  maxLength: 64
                firstName:
                  type: string
                  pattern: ^[A-Za-z-]{1,64}$
                  maxLength: 64
                lastName:
                  type: string
                  pattern: ^[A-Za-z-]{1,64}$
                  maxLength: 64
                type:
                  type: string
                  enum:
                    - student
                    - staff
                    - admin
      responses:
        "201":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/MalformedRequest"
        default:
          $ref: "#/components/responses/DefaultError"
  /users/{id}:
    delete:
      summary: Delete a user
      operationId: deleteUserById
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "204":
          description: User deleted
        "401":
          $ref: "#/components/responses/MalformedRequest"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    get:
      summary: Get a user info by Id
      operationId: getUserById
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: User Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: Update a users details
      operationId: updateUserById
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "204":
          description: User Details Updated
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
  /users/auth:
    get:
      summary: Verify user JWT
      operationId: verifyLogin
      tags:
        - User
      responses:
        "200":
          description: User Details
          content:
            application/json:
              schema:
                properties:
                  valid:
                    type: boolean
                  message:
                    type: string
                    maxLength: 2048
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
  /users/login:
    post:
      summary: "User: Login a user"
      operationId: loginUser
      tags:
        - User
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
  /users/profile:
    get:
      summary: "User: Get a users profile"
      operationId: getUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: "User: Update a users profile"
      operationId: updateUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
    delete:
      summary: "User: Delete a users profile"
      operationId: deleteUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Profile Deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
  /dorm:
    get:
      summary: "Dormitory: Fetches all the dorm data"
      operationId: listDorms
      tags:
        - Dorm
      parameters:
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/noPaginate"
        - $ref: "#/components/parameters/param"
        - $ref: "#/components/parameters/keyword"
      responses:
        "200":
          $ref: "#/components/responses/ListOfDormsResponse"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: "Dormitory: Create a new dorm"
      operationId: createDorm
      tags:
        - Dorm
      requestBody:
        description: Dorm Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dorm"
      responses:
        "201":
          description: Dorm Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dorm"
        "400":
          $ref: "#/components/responses/MalformedRequest"
        default:
          $ref: "#/components/responses/DefaultError"
  /dorm/{id}:
    delete:
      summary: "Dormitory: Delete a dorm by Id"
      operationId: DeleteDormById
      tags:
        - Dorm
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "204":
          description: Dorm deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    get:
      summary: "Dormitory: Get a dorm info by Id"
      operationId: getDormById
      tags:
        - Dorm
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: Dorm Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dorm"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: "Dormitory: Update a dorm by Id"
      operationId: updateDormById
      tags:
        - Dorm
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        description: Dorm Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dorm"
      responses:
        "200":
          description: Dorm Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dorm"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
  /dorm/manager/{id}:
    get:
      summary: "Dormitory: Get all dorms by manager's id"
      operationId: getDormsByManager
      tags:
        - Dorm
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          $ref: "#/components/responses/ListOfDormsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: "Dormitory: Create a new dorm manager"
      operationId: createDormManager
      tags:
        - Dorm
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        description: Dorm Manager Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manager"
      responses:
        "201":
          description: Dorm Manager Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manager"
        "400":
          $ref: "#/components/responses/MalformedRequest"
        default:
          $ref: "#/components/responses/DefaultError"
  /house:
    get:
      summary: "House: Fetches all the house data"
      operationId: getHouses
      tags:
        - House
      parameters:
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/noPaginate"
        - $ref: "#/components/parameters/param"
        - $ref: "#/components/parameters/keyword"
      responses:
        "200":
          $ref: "#/components/responses/ListOfHousesResponse"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: "House: Create a new house"
      operationId: createHouse
      tags:
        - House
      requestBody:
        description: House Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/House"
      responses:
        "201":
          description: House Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/House"
        "400":
          $ref: "#/components/responses/MalformedRequest"
        default:
          $ref: "#/components/responses/DefaultError"
  /house/{id}:
    delete:
      summary: "House: Delete a house by ID"
      operationId: deleteHouseById
      tags:
        - House
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "204":
          description: House deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    get:
      summary: "House: Get a house info by Id"
      operationId: getHouseById
      tags:
        - House
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: House Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/House"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: "House: Update a house by Id"
      operationId: updateHouseById
      tags:
        - House
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        description: House Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/House"
      responses:
        "200":
          description: House Details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/House"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
  /house/manager/{id}:
    get:
      summary: "House: Get all houses info by  manager id"
      operationId: getHouseByUsers
      tags:
        - House
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          $ref: "#/components/responses/ListOfHousesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
  /manager:
    get:
      summary: "Manager: Fetches all the manager data"
      operationId: getManagers
      tags:
        - Manager
      parameters:
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/noPaginate"
        - $ref: "#/components/parameters/param"
        - $ref: "#/components/parameters/keyword"
      responses:
        "200":
          $ref: "#/components/responses/ListOfManagersResponse"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: "Manager: Sign up a manager"
      operationId: registerManager
      tags:
        - Manager
      requestBody:
        description: Manager Data
        required: true
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
              required:
                - businessName
                - managerFirstName
                - managerLastName
                - managerEmail
                - managerDescription
                - type
              properties:
                businessName:
                  type: string
                  description: Business name
                  pattern: ^[A-Za-z-]{1,64}$
                  maxLength: 64
                managerFirstName:
                  type: string
                  description: Manager first name
                  pattern: ^[A-Za-z-]{1,64}$
                  maxLength: 64
                managerLastName:
                  type: string
                  description: Manager last name
                  pattern: ^[A-Za-z-]{1,64}$
                  maxLength: 64
                managerEmail:
                  type: string
                  format: email
                  pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
                  maxLength: 256
                managerDescription:
                  type: string
                  description: Manager description
                type:
                  type: string
                  description: Manager type
                  enum:
                    - manager
                    - admin
                password:
                  type: string
                  format: password
                  pattern: ^[A-Za-z0-9!@#$%^&*()_.]{4,64}$
                  maxLength: 64
      responses:
        "201":
          description: Signup successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manager"
        "400":
          $ref: "#/components/responses/MalformedRequest"
        default:
          $ref: "#/components/responses/DefaultError"
  /manager/auth:
    get:
      summary: Verify manager JWT
      operationId: verifyManagerLogin
      tags:
        - Manager
      responses:
        "200":
          description: Manager verified
          content:
            application/json:
              schema:
                properties:
                  valid:
                    type: boolean
                  message:
                    type: string
                    maxLength: 2048
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
  /manager/login:
    post:
      summary: "Manager: Login a manager"
      operationId: loginManager
      tags:
        - Manager
      requestBody:
        description: Manager Data
        required: true
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
              required:
                - managerEmail
                - password
              properties:
                managerEmail:
                  type: string
                  format: email
                  pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
                  maxLength: 256
                password:
                  type: string
                  format: password
                  pattern: ^[A-Za-z0-9!@#$%^&*()_.]{4,64}$
                  maxLength: 64
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manager"
        "400":
          $ref: "#/components/responses/MalformedRequest"
        default:
          $ref: "#/components/responses/DefaultError"
  /manager/profile:
    get:
      summary: "Manager: Get a managers profile"
      operationId: getManagerProfile
      tags:
        - Manager
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Manager profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manager"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: "Manager: Update a manager profile"
      operationId: updateManagerProfile
      tags:
        - Manager
      security:
        - bearerAuth: []
      requestBody:
        description: Manager Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manager"
      responses:
        "200":
          description: Manager profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manager"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
    delete:
      summary: "Manager: Delete a users profile"
      operationId: deleteManagerProfile
      tags:
        - Manager
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Profile Deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
  /manager/profile/property:
    get:
      summary: "Manager: Get the logged in manager's property"
      operationId: getAllPropertiesByProfile
      tags:
        - Manager
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ListOfPropertiesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
  /manager/property/{type}/{id}:
    get:
      summary: "Manager: Get a property"
      operationId: getAllPropertiesByIdAndType
      tags:
        - Manager
      parameters:
        - $ref: "#/components/parameters/idPath"
        - $ref: "#/components/parameters/typePath"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ListOfPropertiesResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
    delete:
      summary: "Manager: Delete a property"
      operationId: deletePropertiesByIdAndType
      tags:
        - Manager
      parameters:
        - $ref: "#/components/parameters/idPath"
        - $ref: "#/components/parameters/typePath"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Property Deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/DefaultError"
components:
  parameters:
    idPath:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: mongo-objectid
        pattern: ^[A-Za-z0-9 ]{24}$
        maxLength: 24
    typePath:
      in: path
      name: type
      required: true
      schema:
        type: string
        enum:
          - dorm
          - house
    pageSize:
      in: query
      name: pageSize
      description: "Pagination: Page size sent back in the payload. Defaults to 10"
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 20
    pageNumber:
      in: query
      name: pageNumber
      description: "Pagination: Current Page number. Defaults to 1"
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
    noPaginate:
      in: query
      name: noPaginate
      description: "Pagination: Deactivate pagination. Defaults to false"
      schema:
        type: boolean
    param:
      in: query
      name: param
      description: "Search: Parameter you want to search in. E.g. Title, Description"
      schema:
        type: string
        pattern: ^[a-zA-Z0-9 ]*$
        maxLength: 20
    keyword:
      in: query
      name: keyword
      description: "Search: Keyword you want to search in"
      schema:
        type: string
        pattern: ^[a-zA-Z0-9 ]*$
        maxLength: 20
  responses:
    ListOfUsersResponse:
      description: "List of Users"
      content:
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              users:
                type: array
                maxItems: 256
                items:
                  $ref: "#/components/schemas/User"
              page:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              pages:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              total:
                type: integer
                format: int32
                minimum: 1
                maximum: 9999
    ListOfDormsResponse:
      description: "List of all Dorms or Dorms that match the search params"
      content:
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              dorms:
                type: array
                maxItems: 256
                items:
                  $ref: "#/components/schemas/Dorm"
              page:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              pages:
                type: integer
                format: int32
                minimum: 0
                maximum: 1000
              total:
                type: integer
                format: int32
                minimum: 1
                maximum: 9999
    ListOfHousesResponse:
      description: "List of all House or Houses that match the search params"
      content:
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              houses:
                type: array
                maxItems: 256
                items:
                  $ref: "#/components/schemas/House"
              page:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              pages:
                type: integer
                format: int32
                minimum: 0
                maximum: 1000
              total:
                type: integer
                format: int32
                minimum: 1
                maximum: 9999
    ListOfManagersResponse:
      description: "List of all Managers or Managers that match the search params"
      content:
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              managers:
                type: array
                maxItems: 256
                items:
                  $ref: "#/components/schemas/Manager"
              page:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              pages:
                type: integer
                format: int32
                minimum: 0
                maximum: 1000
              total:
                type: integer
                format: int32
                minimum: 1
                maximum: 9999
    ListOfPropertiesResponse:
      description: "List of all Properties or Properties that match the search params"
      content:
        application/json:
          schema:
            type: object
            properties:
              properties:
                type: object
                properties:
                  dorms:
                    type: array
                    maxItems: 256
                    items:
                      $ref: "#/components/schemas/Dorm"
                  houses:
                    type: array
                    maxItems: 256
                    items:
                      $ref: "#/components/schemas/House"
              page:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              pages:
                type: integer
                format: int32
                minimum: 0
                maximum: 1000
              total:
                type: integer
                format: int32
                minimum: 1
                maximum: 9999
    ListOfPropertiesByTypesResponse:
      description: "List of all Properties or Properties that match the search params and the type"
      content:
        application/json:
          schema:
            additionalProperties: false
            type: object
            properties:
              properties:
                type: array
                maxItems: 256
                items:
                  $ref: "#/components/schemas/Property"
              page:
                type: integer
                format: int32
                minimum: 1
                maximum: 1000
              pages:
                type: integer
                format: int32
                minimum: 0
                maximum: 1000
              total:
                type: integer
                format: int32
                minimum: 1
                maximum: 9999
    Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    MalformedRequest:
      description: Malformed request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ResourceNotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: mongo-objectid
          pattern: ^[A-Za-z0-9 ]{24}$
          maxLength: 24
        email:
          type: string
          format: email
          pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
          maxLength: 256
        password:
          type: string
          format: password
          pattern: ^[A-Za-z0-9!@#$%^&*()_.]{1,64}$
          maxLength: 64
        firstName:
          type: string
          pattern: ^[A-Za-z-]{1,64}$
          maxLength: 64
        lastName:
          type: string
          pattern: ^[A-Za-z-]{1,64}$
          maxLength: 64
        type:
          type: string
          enum:
            - student
            - houseOwner
            - dormOwner
        token:
          type: string
          pattern: ^(?:[\w-]*\.){2}[\w-]*$
          maxLength: 1024
        isAdmin:
          type: boolean
    Error:
      type: object
      properties:
        message:
          type: string
          maxLength: 2048
    Dorm:
      type: object
      properties:
        name:
          type: string
          pattern: ^[A-Za-z0-9. ]{1,256}$
          maxLength: 256
        description:
          type: string
          pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
          maxLength: 1000
        address:
          type: object
          properties:
            addressLine:
              type: string
              pattern: ^[A-Za-z0-9. ]{1,256}$
              maxLength: 256
            city:
              type: string
              pattern: ^[A-Za-z0-9. ]{1,256}$
              maxLength: 256
            postalCode:
              type: string
              pattern: ^[A-Za-z0-9. ]{1,64}$
              maxLength: 64
            country:
              type: string
              pattern: ^[a-zA-Z]{2,}$
              maxLength: 64
        bedroomCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
        bedCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 50
        bathroomCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 50
        accomodateCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 50
        availabilityCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
        approved:
          type: boolean
        pricePerSemester:
          type: number
          format: currency
          minimum: 1
          maximum: 999999
        pricePerNight:
          type: number
          format: currency
          minimum: 1
          maximum: 999999
        pictures:
          type: array
          maxItems: 64
          items:
            type: object
            properties:
              url:
                type: string
                format: url
                # pattern: ^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
                maxLength: 300
              description:
                type: string
                pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
                maxLength: 1000
        keywords:
          type: array
          maxItems: 128
          items:
            type: object
            properties:
              tag:
                type: string
                pattern: ^[a-zA-Z0-9 ]*$
                maxLength: 64
              description:
                type: string
                pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
                maxLength: 1024
        reviews:
          type: array
          maxItems: 256
          items:
            type: object
            properties:
              name:
                type: string
                pattern: ^[A-Za-z0-9. ]{1,256}$
                maxLength: 256
              rating:
                type: integer
                format: int32
                minimum: 1
                maximum: 5
              comment:
                type: string
                pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
                maxLength: 256
              user:
                type: string
                format: mongo-objectid
                pattern: ^[A-Za-z0-9 ]{1,24}$
                maxLength: 24
    House:
      type: object
      properties:
        name:
          type: string
          pattern: ^[A-Za-z0-9. ]{1,256}$
          maxLength: 256
        description:
          type: string
          pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
          maxLength: 1000
        address:
          type: object
          properties:
            addressLine:
              type: string
              pattern: ^[A-Za-z0-9. ]{1,256}$
              maxLength: 256
            city:
              type: string
              pattern: ^[A-Za-z0-9. ]{1,256}$
              maxLength: 256
            postalCode:
              type: string
              pattern: ^[A-Za-z0-9. ]{1,64}$
              maxLength: 64
            country:
              type: string
              pattern: ^[a-zA-Z]{2,}$
              maxLength: 64
        bedroomCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
        bedCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 50
        bathroomCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 50
        accomodateCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 50
        availabilityCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
        approved:
          type: boolean
        pricePerSemester:
          type: number
          format: currency
          minimum: 1
          maximum: 999999
        pricePerNight:
          type: number
          format: currency
          minimum: 1
          maximum: 999999
        pictures:
          type: array
          maxItems: 64
          items:
            type: object
            properties:
              url:
                type: string
                format: url
                # pattern: ^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
                maxLength: 300
              description:
                type: string
                pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
                maxLength: 1000
        keywords:
          type: array
          maxItems: 128
          items:
            type: object
            properties:
              tag:
                type: string
                pattern: ^[a-zA-Z0-9 ]*$
                maxLength: 64
              description:
                type: string
                pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
                maxLength: 1024
        reviews:
          type: array
          maxItems: 256
          items:
            type: object
            properties:
              name:
                type: string
                pattern: ^[A-Za-z0-9. ]{1,256}$
                maxLength: 256
              rating:
                type: integer
                format: int32
                minimum: 1
                maximum: 5
              comment:
                type: string
                pattern: ^(.|\s)*[a-zA-Z]+(.|\s)*$
                maxLength: 256
              user:
                type: string
                format: mongo-objectid
                pattern: ^[A-Za-z0-9 ]{1,24}$
                maxLength: 24
    Manager:
      type: object
      properties:
        _id:
          type: string
          format: mongo-objectid
          pattern: ^[A-Za-z0-9 ]{24}$
          maxLength: 24
        businessName:
          type: string
          description: Business name
          pattern: ^[A-Za-z-]{1,64}$
          maxLength: 64
        managerFirstName:
          type: string
          description: Manager first name
          pattern: ^[A-Za-z-]{1,64}$
          maxLength: 64
        managerLastName:
          type: string
          description: Manager last name
          pattern: ^[A-Za-z-]{1,64}$
          maxLength: 64
        managerEmail:
          type: string
          format: email
          pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
          maxLength: 256
        managerDescription:
          type: string
          description: Manager description
        type:
          type: string
          description: Manager type
          enum:
            - manager
            - admin
        password:
          type: string
          format: password
          pattern: ^[A-Za-z0-9!@#$%^&*()_.]{4,64}$
          maxLength: 64
    Property:
      type: object
      oneOf:
        - $ref: "#/components/schemas/House"
        - $ref: "#/components/schemas/Dorm"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
